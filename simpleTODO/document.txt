Database's schema:
users table has these columns:
id           int
userId       varchar(64)
username     varchar(30)
password     varchar(64)
firstName    varchar(20)
lastName     varchar(20)
email        varchar(40)
phoneNumber  varchar(10)
rule         varchar(5)
suspended    varchar(3)

tasks table has these columns:
id           int 
author       varchar(64)
priority     varchar(6)
category     varchar(20)
title        varchar(30)
description  varchar(70)
finished     varchar(10)

sessions table has these columns:
id           int
sessionId    varchar(64)
userId       varchar(64)

messages table has these columns:
id           int 
author       varchar(64)
priority     varchar(6)
category     varchar(20)
title        varchar(30)
description  varchar(70)
finished     varchar(10)

+++++++++++++++++++++++++++++++++++++++

Routing:
since the golang treats the URL patter "/" like a catch all.
when user visits any path, the handle func for the "/" will call RoutingHandler in routing package.
all the routes will be divided into 3 main categories:
routes relevant to users which start with "/users/"
routes relevant to tasks which start with "/tasks/"
routes relevant to admin which start with "/admin/"
the routing will be decided by if else conditions and to prevent any
unnecessary conditoin checking first the url's category will be determined
by checking its prefix. and then check the paths relevant to that category.

+++++++++++++++++++++++++++++++++++++++

users sign up process:
when user visits "/users/signup" path the SignupPageHander in usersignup package will be called.
and following up a package wide variable named csrft will be declared
in SignupPageHander the csrft will be initialized with random string generated by GenerateUUID function.
then a cookie with the name of csrft and the value of csrft variable will be set on the browser.
then the signup page html will be parsed and rendered.
in the signup page there is a form which takes:
username, password, firstName, lastName, email and phone number from user.
the action attribute for this form is "/users/signupprocess".
so when the user clicks on submit button the form will be submitted to to "/users/signupprocess" via POST method.
after the from was submitted to "/users/signupprocess" the SignupProcessHandler will be called.
first it will check that the request method be equal to "POST".
after that it will initialized a new variable named sent_csrf_token to be compared to the original csrf token generated
in the server (package wide csrft variable)
then it will check if there was a csrft cookie or not.
if not the user will be redirected to "/users/signup" path.
if there was a csrft cookie then it will compare the sent_csrf_token with the original csrft.
the it will parse the form and gets the:
username, password, firstName, lastName, email, phoneNumber from form.
then there will be a some server-side user input validation.
if the inputs were valid a variable named userId will be initialized by random string generated by GenerateUUID function
and so as a variable named sessionId.
then a user record will be created with:
userId => generated by GenerateUUID
username => provided by user
password => hashed value of what user provided
firstName => provided by user
lastName => provided by user
email => provided by user
phoneNumber => provided by user
rule => by default as "user"
suspended => by default as "no"
also a new session record will be created with:
sessionId => generated by GenerateUUID
userId => generated by GenerateUUID
after everything went through the csrft cookie will be deleted.
and the user will be redirected to "/users/home" path.

+++++++++++++++++++++++++++++++++++++++