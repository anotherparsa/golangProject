Database's schema:
users table has these columns:
id           int
userId       varchar(64)
username     varchar(30)
password     varchar(64)
firstName    varchar(20)
lastName     varchar(20)
email        varchar(40)
phoneNumber  varchar(10)
rule         varchar(5)
suspended    varchar(3)

tasks table has these columns:
id           int 
author       varchar(64)
priority     varchar(6)
category     varchar(20)
title        varchar(30)
description  varchar(70)
finished     varchar(10)

sessions table has these columns:
id           int
sessionId    varchar(64)
userId       varchar(64)

messages table has these columns:
id           int 
author       varchar(64)
priority     varchar(6)
category     varchar(20)
title        varchar(30)
description  varchar(70)
finished     varchar(10)

+++++++++++++++++++++++++++++++++++++++

Routing:
since the golang treats the URL patter "/" like a catch all.
when user visits any path, the handle func for the "/" will call RoutingHandler in routing package.
all the routes will be divided into 3 main categories:
routes relevant to users which start with "/users/"
routes relevant to tasks which start with "/tasks/"
routes relevant to admin which start with "/admin/"
the routing will be decided by if else conditions and to prevent any
unnecessary conditoin checking first the url's category will be determined
by checking its prefix. and then check the paths relevant to that category.

+++++++++++++++++++++++++++++++++++++++

users sign up process:
when user visits "/users/signup" path the SignupPageHander in usersignup package will be called.
and following up a package wide variable named csrft will be declared
in SignupPageHander the csrft will be initialized with random string generated by GenerateUUID function.
then a cookie with the name of csrft and the value of csrft variable will be set on the browser.
then the signup page html will be parsed and rendered.
in the signup page there is a form which takes:
username, password, firstName, lastName, email and phone number from user.
the action attribute for this form is "/users/signupprocess".
so when the user clicks on submit button the form will be submitted to to "/users/signupprocess" via POST method.
after the from was submitted to "/users/signupprocess" the SignupProcessHandler will be called.
first it will check that the request method be equal to "POST".
after that it will initialized a new variable named sent_csrf_token to be compared to the original csrf token generated
in the server (package wide csrft variable)
then it will check if there was a csrft cookie or not.
if not the user will be redirected to "/users/signup" path.
if there was a csrft cookie then it will compare the sent_csrf_token with the original csrft.
the it will parse the form and gets the:
username, password, firstName, lastName, email, phoneNumber from form.
then there will be a some server-side user input validation.
if the inputs were valid a variable named userId will be initialized by random string generated by GenerateUUID function
and so as a variable named sessionId.
then a user record will be created with:
userId => generated by GenerateUUID
username => provided by user
password => hashed value of what user provided
firstName => provided by user
lastName => provided by user
email => provided by user
phoneNumber => provided by user
rule => by default as "user"
suspended => by default as "no"
also a new session record will be created with:
sessionId => generated by GenerateUUID
userId => generated by GenerateUUID
after everything went through the csrft cookie will be deleted.
and the user will be redirected to "/users/home" path.

+++++++++++++++++++++++++++++++++++++++

users login process:
when user visits "/users/login" path the LoginPageHander in userlogin package will be called.
and following up a package wide variable named csrft will be declared
just as same as SignupPageHander in LoginPageHander the csrft will be initialized with random string generated by GenerateUUID function.
then a cookie with the name of csrft and the value of csrft variable will be set on the browser.
then the login page html will be parsed and rendered.
in the login page there is a form which takes:
username, password from user.
the action attribute for this form is "/users/loginprocess".
so when the user clicks on submit button the form will be submitted to to "/users/loginprocess" via POST method.
after the from was submitted to "/users/loginprocess" the LoginProcessHandler will be called.
first it will check that the request method be equal to "POST".
after that it will initialized a new variable named sent_csrf_token to be compared to the original csrf token generated
in the server (package wide csrft variable)
then it will check if there was a csrft cookie or not.
if not the user will be redirected to "/users/signup" path.
if there was a csrft cookie then it will compare the sent_csrf_token with the original csrft.
the it will parse the form and gets the:
username, password from form.
then there will be a some server-side user input validation.
if the inputs were valid ValidateUser will be called, it will take the username and password as input.
then it will check the entered user's password with the entered password are the same or not
after everything has been checked that means the authentication was successful then it will initialize a sessionId variable with the value of generated by GenerateUUID
and then get that users information and set a cookie with the seesionId and userId
then the user will be redirected to "/user/home"

+++++++++++++++++++++++++++++++++++++++

user editing:
when users home page is rendered a button named edit account will be rendered too, 
which is a link to "/users/editaccount/V" where V is the ID of that user.
for example if a user has the id of 4 the edit account button will be a link to "/users/editaccount/4"
now when user clicks on that button it will go to /users/edituser/4 UpdateUserPageHandler will be called.
first it will look for a cookie named session_id.
if there was a cookie it will get user's id of the user by that session_id value.
user id will be trimmed out of the URL.
then it will check if the user's id came back by WhoIsThis by that session_id value is the same as the user's id trimmed out of the url or not.
if everything is ok, it will get that user and render a edit user page with the current users values for user to change.
in that page user can change those values if they want and when they click on the update user the form will be submitted to "/users/edituserprocessor"
when it goes to "/users/edituserprocessor" the UpdateUserProcessor will be called and at first it will check if the request method is "POST" or not.
then it will parse the form to get those new values and then it will update the record in database.

+++++++++++++++++++++++++++++++++++++++

users Home Page:
when user visits "/" or "/users/home" path the HomePageHandler int userhome will be called.
first it will check for a cookie named "session_id", if the cookie was not found use will be redirected to the "/users/signup" path.
if the cookie was found the following information will be gathered for that user.
username to welcome in the home page
usersid which is the user's id for a link in edit user button.
userId which is the user's userId for getting the tasks with author value of that userId
then the home page will be rendered and be shown to the user.

+++++++++++++++++++++++++++++++++++++++

users logout:
in users home page there is a button named logout.
this button is a link to "/users/logout"
when user visits this path the session_id cookie will be deleted from the browser and
user will be redirect to "/users/login"

+++++++++++++++++++++++++++++++++++++++

users sending message to the admin:
in users home page there is a button named send message.
this button is a link to "/users/messages"
when use visits "/users/messages" UserMessagePageHandler will be called.
it will parse and show the user message page.
in that page use fills a form which gets these from user:
Title, Description, Category, Priority. 
when user fills them and click the send message button the form will be submitted to "/users/createmessageprocessor"
and when it goes to "/users/createmessageprocessor", CreateUserMessageProcessor will be called.
first it will check if the request method is POST or not, then it will check for cookie named session_id.
then it will parse them form and create a new variable named author which is the username associated with that session_id.
then a message record will be created with:
Author => user's username got by session_id
Priority => provided by user
Category => provided by user
Title => provided by user
Description => provided by user
finished => with "unfinished" value by default.
and then user will be redirected to "/users/home"

+++++++++++++++++++++++++++++++++++++++

tasks adding:
there is a form in user's home page that can give information about a task that the user wants to create.
the user can fill the inputs which are:
Title, Description, Category, Priority
and when the user clicks on add task button the form will be submited to "/tasks/createtaskprocess" via POST.
when user goes to "/tasks/createtaskprocess" CreateTaskProcessor will be called.
first it will check if the request method is equal to POST or not.
then it will check for a cookie named "session_id" to see if the user is logged in or not.
then it will parse the form and use the session_id to obtain the logged user's userId.
the userId will be used as the author of the tasks. at first I used user's user name as author.
but when user changed its username, the user's task wouldn't show because the username was changed and server used username to get users task.
but userId of a user would never chagne.
then it will create a record of tasks with this:
Author => user's userId got by session_id
Priority => provided by user
Category => provided by user
Title => provided by user
Description => provided by user
finished => with "unfinished" value by default.

+++++++++++++++++++++++++++++++++++++++

task editing:
when tasks are rendered in home page, each task will have two buttons for edit and deleting that task.
edit button is a link to this address:
"/tasks/edittask/V" where v is the ID of that task.
for example if a task has the id of 4 the delete button will be a link to "/tasks/edittask/4"
now when user clicks on that button it will go to /tasks/edittask/4 UpdateTaskPageHandler will be called.
first it will look for a cookie named session_id.
if there was a cookie it will get userId of the user by that session_id value.
taskID will be trimmed out of the URL.
and the task with that id will be read from database.
then it will check if the userId corresponding to that session_id is the same as the author of that task.
if everything went through the edit task page will be rendered with that tasks corrent values in a form.
in that page user can change those values if they want and when they click on the update task the form will be submitted to "/tasks/edittaskprocessor"
when it goes to "/tasks/edittaskprocessor" the UpdateTaskProcessor will be called and at first it will check if the request method is "POST" or not.
then it will parse the form to get those new values and then it will update the record in database.

+++++++++++++++++++++++++++++++++++++++

tasks deleting:
when tasks are rendered in home page, each task will have two buttons for edit and deleting that task.
delete button is a link to this address:
"/tasks/deletetask/V" where v is the ID of that task.
for example if a task has the id of 4 the delete button will be a link to "/tasks/deletetask/4"
now when user clicks on that button it will go to /tasks/deletetask/4 and a new variable named taskID will be created with the value of 4.
then it will use that id to delete the task from database.

+++++++++++++++++++++++++++++++++++++++
